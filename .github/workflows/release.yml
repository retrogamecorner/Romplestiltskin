name: Continuous Build

# This workflow runs on every push to the main branch
on:
  push:
    branches:
      - main  # Change to 'master' if that is your default branch

jobs:
  build:
    # A friendly name for the job
    name: Build for ${{ matrix.os-name }}
    
    # Define the build matrix for Windows, macOS, and Linux
    strategy:
      matrix:
        include:
          - os: windows-latest
            os-name: Windows
            output-name: Romplestiltskin-Windows.exe
            pyinstaller-output: Romplestiltskin.exe
            spec-file: Romplestiltskin-windows.spec
          - os: macos-latest
            os-name: macOS
            output-name: Romplestiltskin-macOS
            pyinstaller-output: Romplestiltskin
            spec-file: Romplestiltskin-macos.spec
          - os: ubuntu-latest
            os-name: Linux
            output-name: Romplestiltskin-Linux
            pyinstaller-output: Romplestiltskin
            spec-file: Romplestiltskin-linux.spec

    # The operating system the job will run on
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create directories and verify structure
        run: |
          mkdir -p dist
          mkdir -p src/ui/texture
          # Create a placeholder file in texture directory to ensure it's not empty
          touch src/ui/texture/.gitkeep
          echo "Current directory contents:"
          ls -la
          echo "Source directory contents:"
          ls -la src/
          echo "UI directory contents:"
          ls -la src/ui/
          echo "Texture directory contents:"
          ls -la src/ui/texture/
        shell: bash

      - name: Create OS-specific spec file
        run: |
          python3 << 'EOF'
          import os
          import shutil
          
          # Read the original spec file
          with open('Romplestiltskin.spec', 'r') as f:
              content = f.read()
          
          # Determine the target spec file and distpath
          matrix_os = '${{ matrix.os }}'
          spec_file = '${{ matrix.spec-file }}'
          
          # Change distpath to 'dist' for all platforms (including Windows)
          content = content.replace("distpath='build/windows'", "distpath='dist'")
          
          # Handle texture directory conditionally
          texture_path = 'src/ui/texture'
          if os.path.exists(texture_path) and os.listdir(texture_path):
              # Texture directory exists and is not empty, keep it
              pass
          else:
              # Remove texture directory from datas
              lines = content.split('\n')
              new_lines = []
              skip_texture = False
              for line in lines:
                  if "(os.path.join(src_path, 'ui', 'texture'), 'ui/texture')" in line:
                      skip_texture = True
                      continue
                  new_lines.append(line)
              content = '\n'.join(new_lines)
          
          # Write the modified spec file
          with open(spec_file, 'w') as f:
              f.write(content)
          
          print(f"Generated {spec_file} for {matrix_os}")
          EOF
          
          echo "Generated spec file contents:"
          cat ${{ matrix.spec-file }}
        shell: bash

      - name: Build executable with PyInstaller
        run: pyinstaller ${{ matrix.spec-file }}

      - name: Debug build output
        run: |
          echo "Dist directory contents:"
          ls -la dist/ || echo "No dist directory"
        shell: bash

      - name: Prepare artifact path
        run: |
          if [ -f "dist/${{ matrix.pyinstaller-output }}" ]; then
            mv dist/${{ matrix.pyinstaller-output }} dist/${{ matrix.output-name }}
          else
            echo "Error: dist/${{ matrix.pyinstaller-output }} not found"
            echo "Available files in dist/:"
            ls -la dist/
            exit 1
          fi
        shell: bash

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          # The name of the downloadable artifact zip file
          name: Romplestiltskin-Build-v0.1.0-pre-alpha.${{ github.run_number }}-${{ matrix.os-name }}
          # The path to the file to upload
          path: dist/${{ matrix.output-name }}
